---
service: gip-edit-react
frameworkVersion: "4"
useDotenv: true
disabledDeprecations:
  - CLI_OPTIONS_SCHEMA # some Serverless plugins haven't been updated yet and generate warnings

plugins:
  - serverless-webpack
  - serverless-plugin-scripts
  - serverless-offline
  - serverless-s3-deploy
  - serverless-domain-manager

build:
  esbuild: false

provider:
  name: aws
  runtime: nodejs22.x
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 6
  logRetentionInDays: 7

  apiGateway:
    shouldStartNameWithService: true # for upcoming Serverless v3

  iam:
    role:
      statements:
        ${file(serverless/policies/default/lambda-execution-role-policy.yml)}
  stackPolicy:
    ${file(serverless/policies/default/stack-policy.yml)}

  environment:
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}
    NODE_LOG_LEVEL: ${self:custom.NODE_LOG_LEVEL}
    APP_DIST_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APP_PUBLIC_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APIGATEWAY_URL:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}
    IS_LOCAL: ${self:custom.isLocal}
    LOCAL_DYNAMO_DB_ENDPOINT: ${self:custom.localDynamodbEndpoint}
    GIP_MAX_PROGRAMS: ${self:custom.maxPrograms}
    AUTH_URI: ${self:custom.authURI}

custom:
  serviceName: ${self:service}
  stage: ${env:STAGE, "${self:provider.stage}"}
  apiGatewayRestApiName: ${self:custom.stage}-${self:custom.serviceName}
  baseDomain: "rhobweb.com"
  envIsOffline: ${env:IS_OFFLINE, "default"}
  isOfflineMap:
    true:    "true"
    default: "false"
  isOffline: ${self:custom.isOfflineMap.${self:custom.envIsOffline}, "${self:custom.isOfflineMap.default}"}
  isLocalMap:
    true:    "true"
    default: ""
  isLocal:   ${self:custom.isLocalMap.${self:custom.envIsOffline}, "${self:custom.isLocalMap.default}"}
  localDynamodbEndpoint: "http://localhost:8000"
  maxPrograms: "50"
  # basePath: the URL base path, all API endpoints are below this
  basePath: "gip_edit"
  # But sls offline doesn't handle basePath
  basePathMap:
    true:  "/${self:custom.basePath}"
    false: ""
  apiBasePath: ${self:custom.basePathMap.${self:custom.isOffline}}
  NODE_LOG_LEVEL: ${env:NODE_LOG_LEVEL, "info"}
  stageToDefaultCustomDomainMap:
    lcl:  "localhost"
    dev:  "dev.${self:custom.baseDomain}"
    test: "test.${self:custom.baseDomain}"
    prod: "${self:custom.baseDomain}"
  defaultCustomDomain: ${self:custom.stageToDefaultCustomDomainMap.${self:custom.stage}}
  customDomain:
    domainName: ${env:customDomainName, "${self:custom.defaultCustomDomain}"}
    certificateName: ${env:customDomainCertificateName, "*.${baseDomain}"}
    basePath: ${self:custom.basePath}
    stage: ${self:custom.stage}
    # NOTE: enableCustomDomain must be set to true before first deployment
    enabled: true
  stageToAuthUriMap:
    lcl:  "localhost:3013/sso"
    dev:  "dev.${self:custom.baseDomain}/sso"
    test: "test.${self:custom.baseDomain}/sso"
    prod: "${self:custom.baseDomain}/sso"
  authURI: ${self:custom.stageToAuthUriMap.${self:custom.stage}}
  distBucketUrl:
    us-east-1:
      # us-east-1 uses a different URL format than the other regions
      Fn::Join:
        - ""
        - - https://s3.amazonaws.com/
          - Ref: DistBucket
    default:
      # All other regions
      Fn::Join:
        - ""
        - - https://s3-
          - Ref: AWS::Region
          - .amazonaws.com/
          - Ref: DistBucket
  ##################################################
  # Dynamo DB
  dynamoTableNamePrefix:         ${env:dynamoTableNamePrefix, "${self:custom.stage}_${self:custom.serviceName}_"}
  dynamoTableNameProgram:        "${self:custom.dynamoTableNamePrefix}Program"
  dynamoTableNameProgramHistory: "${self:custom.dynamoTableNamePrefix}ProgramHistory"

  scripts:
    hooks:
      # Build the client-side script before packaging backend code
      package:initialize: "npm run build:browser"
      deploy:finalize: "npx sls s3deploy --stage ${self:provider.stage}"

  webpack:
    webpackConfig: "webpack.server.config.js"

  assets:
    # Automatically copy distribution folder to S3 stopped working; do it manually (see `scripts.hooks.deploy:finalize`)
    auto: false
    targets:
      - bucket:
          Ref: DistBucket
        acl: public-read
        files:
          - source: dist/
            headers:
              CacheControl: max-age=31104000 # 1 year
            globs:
              - "**/*"

  serverless-offline:
    useChildProcesses: true
    noPrependStageInUrl: true
    host: 0.0.0.0
    httpPort: 13003
    lambdaPort: 13002

functions:
  programs:
    # Any web request regardless of path or method will be handled by a single Lambda function
    handler: src/api/programs.handler
    events:
      - http:
          path: ${self:custom.apiBasePath}/api/programs
          method: any
          cors: true
          integration: aws_proxy
  serve:
    # Any web request regardless of path or method will be handled by a single Lambda function
    handler: handler.serve
    events:
      - http:
          path: ${self:custom.apiBasePath}/
          method: any
          cors: true
          integration: aws_proxy
      - http:
          path: /favicon.ico
          method: get
          cors: false
#      - http:
#          path: /{any+}
#          method: any
#          cors: true

resources:
  - ${file(serverless/resources/dynamodb-tables.yml)}
  - ${file(serverless/resources/api-gateway.yml)}
  - ${file(serverless/resources/s3-dist.yml)}
